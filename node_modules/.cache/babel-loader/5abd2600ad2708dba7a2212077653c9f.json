{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nvar propTypes = {\n  className: PropTypes.string,\n  data: PropTypes.array,\n  direction: PropTypes.string,\n  id: PropTypes.string,\n  heading: PropTypes.array,\n  isActive: PropTypes.bool,\n  hasSections: PropTypes.bool\n};\nvar defaultProps = {\n  data: [100],\n  direction: 'top',\n  id: 'bx--data-tooltip',\n  heading: null,\n  isActive: true,\n  hasSections: false\n};\n\nvar DataTooltip = function (_Component) {\n  _inherits(DataTooltip, _Component);\n\n  function DataTooltip() {\n    _classCallCheck(this, DataTooltip);\n\n    return _possibleConstructorReturn(this, (DataTooltip.__proto__ || _Object$getPrototypeOf(DataTooltip)).apply(this, arguments));\n  }\n\n  _createClass(DataTooltip, [{\n    key: 'renderTooltipData',\n    value: function renderTooltipData(data, heading) {\n      var items = data.map(function (item, i) {\n        var divStyle = void 0;\n\n        if (item.color) {\n          if (data.length > 1 && heading) {\n            divStyle = {\n              borderLeft: '4px solid ' + item.color\n            };\n          }\n        }\n\n        var tooltipItemClasses = classNames('bx--data-tooltip-list-item', {\n          'bx--data-tooltip__base': !item.color && data.length <= 1\n        }, {\n          'bx--data-tooltip__single': item.color && data.length <= 1\n        }, {\n          'bx--data-tooltip__multiple': item.color && data.length > 1\n        }, {\n          'bx--data-tooltip__multiple--right': item.color && data.length > 3 && i >= data.length / 2\n        }, {\n          'bx--data-tooltip__multiple--left': item.color && data.length > 3 && i < data.length / 2\n        });\n        return React.createElement('li', {\n          key: i,\n          style: divStyle,\n          className: tooltipItemClasses\n        }, item.label && React.createElement('span', {\n          className: 'bx--data-tooltip-list-item__label'\n        }, item.label), React.createElement('span', {\n          className: 'bx--data-tooltip-list-item__data'\n        }, item.data));\n      });\n      return items;\n    }\n  }, {\n    key: 'getTootlTipClasses',\n    value: function getTootlTipClasses(isActive, className) {\n      return classNames('bx--tooltip', 'bx--data-tooltip', {\n        'bx--tooltip--shown': isActive\n      }, className);\n    }\n  }, {\n    key: 'getTootleTipListClasses',\n    value: function getTootleTipListClasses(data) {\n      return classNames('bx--data-tooltip-list', {\n        'bx--data-tooltip-list--block': data.length >= 4\n      });\n    }\n  }, {\n    key: 'getListStyle',\n    value: function getListStyle(data) {\n      return {\n        columnCount: data.length > 3 ? '2' : '1',\n        columnGap: '1.25rem'\n      };\n    }\n  }, {\n    key: 'getHeadingClasses',\n    value: function getHeadingClasses(data) {\n      return classNames('bx--data-tooltip__label', {\n        'bx--data-tooltip__label--no-margin': data.length === 1\n      });\n    }\n  }, {\n    key: 'renderTooltipHeading',\n    value: function renderTooltipHeading(data, heading) {\n      var headingClasses = this.getHeadingClasses(data);\n      return heading && React.createElement('p', {\n        className: headingClasses\n      }, heading);\n    }\n  }, {\n    key: 'renderTooltipBody',\n    value: function renderTooltipBody(data, heading) {\n      var direction = this.props.direction;\n      var tooltipListClasses = this.getTootleTipListClasses(data);\n      var listStyle = this.getListStyle(data);\n\n      if (data.length === 1 && data[0].color) {\n        if (direction === 'top') {\n          listStyle.borderTop = '4px solid ' + data[0].color;\n        } else if (direction === 'bottom') {\n          listStyle.borderBottom = '4px solid ' + data[0].color;\n        }\n      }\n\n      return React.createElement('ul', {\n        className: tooltipListClasses,\n        style: listStyle\n      }, this.renderTooltipData(data, heading));\n    }\n  }, {\n    key: 'renderTooltipSections',\n    value: function renderTooltipSections(data, heading) {\n      var self = this;\n      return data.map(function (section, i) {\n        return React.createElement('div', null, self.renderTooltipHeading(data, heading[i]), self.renderTooltipBody(section, heading[i]));\n      });\n    }\n  }, {\n    key: 'renderAllSections',\n    value: function renderAllSections(data, heading) {\n      var sections = this.renderTooltipSections(data, heading);\n      return sections.map(function (section) {\n        return section;\n      });\n    }\n  }, {\n    key: 'renderDefault',\n    value: function renderDefault(data, heading) {\n      return React.createElement('div', null, this.renderTooltipHeading(data, heading), this.renderTooltipBody(data, heading));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          className = _props.className,\n          direction = _props.direction,\n          heading = _props.heading,\n          isActive = _props.isActive,\n          data = _props.data,\n          hasSections = _props.hasSections,\n          other = _objectWithoutProperties(_props, ['className', 'direction', 'heading', 'isActive', 'data', 'hasSections']);\n\n      return React.createElement('div', _extends({\n        className: this.getTootlTipClasses(isActive, className),\n        'data-floating-menu-direction': direction\n      }, other), hasSections ? this.renderAllSections(data, heading) : this.renderDefault(data, heading));\n    }\n  }]);\n\n  return DataTooltip;\n}(Component);\n\nDataTooltip.propTypes = propTypes;\nDataTooltip.defaultProps = defaultProps;\nexport default DataTooltip;","map":null,"metadata":{},"sourceType":"module"}