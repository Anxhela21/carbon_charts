{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.slice\");\n\nrequire(\"core-js/modules/es.object.define-properties\");\n\nrequire(\"core-js/modules/es.object.define-property\");\n\nrequire(\"core-js/modules/es.object.freeze\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = renderMain;\n\nvar _global = require(\"global\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _commonTags = require(\"common-tags\");\n\nvar _element_check = _interopRequireDefault(require(\"./element_check\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n         Seems like you are not returning a correct React element from the story.\\n         Could you double check that?\\n       \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        Did you forget to return the React element from the story?\\n        Use \\\"() => (<MyComp/>)\\\" or \\\"() => { return <MyComp/>; }\\\" when defining the story.\\n      \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nvar rootEl = _global.document ? _global.document.getElementById('root') : null;\n\nfunction render(node, el) {\n  _reactDom[\"default\"].render(process.env.STORYBOOK_EXAMPLE_APP ? _react[\"default\"].createElement(_react[\"default\"].StrictMode, null, node) : node, el);\n}\n\nfunction renderMain(_ref) {\n  var storyFn = _ref.storyFn,\n      selectedKind = _ref.selectedKind,\n      selectedStory = _ref.selectedStory,\n      showMain = _ref.showMain,\n      showError = _ref.showError,\n      forceRender = _ref.forceRender;\n  var element = storyFn();\n\n  if (!element) {\n    showError({\n      title: \"Expecting a React element from the story: \\\"\".concat(selectedStory, \"\\\" of \\\"\").concat(selectedKind, \"\\\".\"),\n      description: (0, _commonTags.stripIndents)(_templateObject())\n    });\n    return;\n  }\n\n  if (!(0, _element_check[\"default\"])(element)) {\n    showError({\n      title: \"Expecting a valid React element from the story: \\\"\".concat(selectedStory, \"\\\" of \\\"\").concat(selectedKind, \"\\\".\"),\n      description: (0, _commonTags.stripIndents)(_templateObject2())\n    });\n    return;\n  } // We need to unmount the existing set of components in the DOM node.\n  // Otherwise, React may not recreate instances for every story run.\n  // This could leads to issues like below:\n  // https://github.com/storybookjs/react-storybook/issues/81\n  // But forceRender means that it's the same story, so we want too keep the state in that case.\n\n\n  if (!forceRender) {\n    _reactDom[\"default\"].unmountComponentAtNode(rootEl);\n  }\n\n  showMain();\n  render(element, rootEl);\n}","map":null,"metadata":{},"sourceType":"script"}