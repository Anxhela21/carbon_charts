{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport { settings } from 'carbon-components';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport deprecate from '../../prop-types/deprecate';\nvar prefix = settings.prefix;\nvar Switch = React.forwardRef(function Switch(_ref, ref) {\n  var _cx;\n\n  var customClassName = _ref.className,\n      index = _ref.index,\n      onClick = _ref.onClick,\n      name = _ref.name,\n      _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? false : _ref$selected,\n      text = _ref.text,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"index\", \"onClick\", \"name\", \"selected\", \"text\"]);\n\n  var className = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--content-switcher-btn\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--content-switcher--selected\"), selected), _defineProperty(_cx, customClassName, !!customClassName), _cx));\n\n  function handleOnClick(event) {\n    onClick(event, index);\n  }\n\n  return React.createElement(\"button\", _extends({\n    \"aria-selected\": selected,\n    className: className,\n    ref: ref,\n    role: \"tab\",\n    onClick: handleOnClick,\n    tabIndex: selected ? '0' : '-1',\n    type: \"button\"\n  }, rest), React.createElement(\"span\", {\n    className: \"\".concat(prefix, \"--content-switcher__label\")\n  }, text));\n});\nSwitch.displayName = 'Switch';\nSwitch.propTypes = {\n  /**\n   * Specify an optional className to be added to your Switch\n   */\n  className: PropTypes.string,\n\n  /**\n   * Provide the name of your Switch that is used for event handlers\n   */\n  name: deprecate(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n\n  /**\n   * The index of your Switch in your ContentSwitcher that is used for event handlers.\n   * Reserved for usage in ContentSwitcher\n   */\n  index: PropTypes.number,\n\n  /**\n   * A handler that is invoked when a user clicks on the control.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * A handler that is invoked on the key down event for the control.\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Whether your Switch is selected. Reserved for usage in ContentSwitcher\n   */\n  selected: PropTypes.bool,\n\n  /**\n   * Provide the contents of your Switch\n   */\n  text: PropTypes.string.isRequired\n};\nexport default Switch;","map":null,"metadata":{},"sourceType":"module"}