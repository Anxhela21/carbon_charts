{"ast":null,"code":"import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nvar propTypes = {\n  data: PropTypes.array,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  margin: PropTypes.object,\n  labelOffset: PropTypes.number,\n  axisOffset: PropTypes.number,\n  timeFormat: PropTypes.string,\n  xAxisLabel: PropTypes.string,\n  yAxisLabel: PropTypes.string\n};\nvar defaultProps = {\n  data: [[100, 10], [50, 20]],\n  height: 300,\n  width: 800,\n  margin: {\n    top: 30,\n    right: 20,\n    bottom: 70,\n    left: 65\n  },\n  labelOffset: 55,\n  axisOffset: 16,\n  timeFormat: '%b',\n  xAxisLabel: 'X Axis',\n  yAxisLabel: 'Y Axis'\n};\n\nvar ScatterPlot = function (_Component) {\n  _inherits(ScatterPlot, _Component);\n\n  function ScatterPlot() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ScatterPlot);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ScatterPlot.__proto__ || _Object$getPrototypeOf(ScatterPlot)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      data: _this.props.data,\n      height: _this.props.height,\n      width: _this.props.width,\n      margin: _this.props.margin,\n      labelOffset: _this.props.labelOffset,\n      axisOffset: _this.props.axisOffset,\n      timeFormat: _this.props.timeFormat,\n      xAxisLabel: _this.props.xAxisLabel,\n      yAxisLabel: _this.props.yAxisLabel\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ScatterPlot, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _state = this.state,\n          width = _state.width,\n          height = _state.height,\n          margin = _state.margin;\n      this.svg = d3.select(this.refs.container).attr('class', 'bx--graph').attr('width', width).attr('height', height).append('g').attr('class', 'bx--group-container').attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');\n      this.setState(function () {\n        return {\n          width: width - (margin.left + margin.right),\n          height: height - (margin.top + margin.bottom)\n        };\n      }, this.initialRender);\n    }\n  }, {\n    key: 'initialRender',\n    value: function initialRender() {\n      var _state2 = this.state,\n          data = _state2.data,\n          width = _state2.width,\n          height = _state2.height;\n      this.x = d3.scaleBand().rangeRound([0, width]).domain(data.map(function (d) {\n        return d[1];\n      }));\n      this.y = d3.scaleLinear().range([height, 0]).domain([0, d3.max(data, function (d) {\n        return d[0];\n      })]);\n      this.renderAxes();\n      this.renderLabels();\n      this.renderPoints();\n      this.renderOverlay();\n    }\n  }, {\n    key: 'renderAxes',\n    value: function renderAxes() {\n      var _state3 = this.state,\n          width = _state3.width,\n          height = _state3.height,\n          axisOffset = _state3.axisOffset,\n          timeFormat = _state3.timeFormat;\n      var xAxis = d3.axisBottom().scale(this.x).tickSize(0).tickFormat(d3.timeFormat(timeFormat));\n      var yAxis = d3.axisLeft().ticks(4).tickSize(-width).scale(this.y.nice());\n      this.svg.append('g').attr('class', 'bx--axis bx--axis--y').attr('stroke-dasharray', '4').call(yAxis).selectAll('text').attr('x', -axisOffset);\n      this.svg.append('g').attr('class', 'bx--axis bx--axis--x').attr('transform', 'translate(0, ' + height + ')').call(xAxis).selectAll('text').attr('y', axisOffset).style('text-anchor', 'end').attr('transform', 'rotate(-65)');\n      this.svg.selectAll('.bx--axis--y path').style('display', 'none');\n      this.svg.selectAll('.bx--axis path').attr('stroke', '#5A6872');\n      this.svg.selectAll('.tick line').attr('stroke', '#5A6872');\n      this.svg.selectAll('.tick text').attr('fill', '#5A6872');\n    }\n  }, {\n    key: 'renderLabels',\n    value: function renderLabels() {\n      var _state4 = this.state,\n          labelOffset = _state4.labelOffset,\n          xAxisLabel = _state4.xAxisLabel,\n          yAxisLabel = _state4.yAxisLabel,\n          height = _state4.height,\n          width = _state4.width;\n      this.svg.select('.bx--axis--y').append('text').text('' + yAxisLabel).attr('class', 'bx--graph-label').attr('transform', 'translate(' + -labelOffset + ', ' + height / 2 + ') rotate(-90)');\n      this.svg.select('.bx--axis--x').append('text').text('' + xAxisLabel).attr('class', 'bx--graph-label').attr('transform', 'translate(' + width / 2 + ', ' + labelOffset + ')');\n      this.svg.selectAll('.bx--graph-label').attr('font-size', '10').attr('font-weight', '700').attr('fill', '#5A6872').attr('text-anchor', 'middle');\n    }\n  }, {\n    key: 'renderPoints',\n    value: function renderPoints() {\n      var _this2 = this;\n\n      var data = this.state.data;\n      this.svg.append('g').attr('class', 'scatter-container').selectAll('circle').data(data).enter().append('circle').attr('class', 'circle').attr('cx', function (d) {\n        return _this2.x(d[1]);\n      }).attr('cy', function (d) {\n        return _this2.y(d[0]);\n      }).attr('fill', '#00a68f').attr('r', 0).transition().delay(function (d, i) {\n        return i * 35;\n      }).attr('r', 4);\n    }\n  }, {\n    key: 'renderOverlay',\n    value: function renderOverlay() {\n      var _this3 = this;\n\n      var _state5 = this.state,\n          width = _state5.width,\n          height = _state5.height,\n          data = _state5.data;\n      this.svg.append('rect').attr('width', width).attr('height', height).attr('class', 'overlay').style('fill', 'none').style('pointer-events', 'all').on('mousemove', function () {\n        _this3.onMouseMove(data);\n      });\n    }\n  }, {\n    key: 'onMouseMove',\n    value: function onMouseMove(data) {\n      var margin = this.state.margin;\n      var bisectDate = d3.bisector(function (d) {\n        return d[1];\n      }).right;\n      var mouse = d3.mouse(this.refs.container)[0] - margin.left;\n      var timestamp = this.x.invert(mouse);\n      var index = bisectDate(data, timestamp);\n      var d0 = data[index - 1];\n      var d1 = data[index];\n      var d = timestamp - d0[1] > d1[1] - timestamp ? d1 : d0;\n      this.props.onHover(d);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('svg', {\n        ref: 'container'\n      });\n    }\n  }]);\n\n  return ScatterPlot;\n}(Component);\n\nScatterPlot.propTypes = propTypes;\nScatterPlot.defaultProps = defaultProps;\nexport default ScatterPlot;","map":null,"metadata":{},"sourceType":"module"}