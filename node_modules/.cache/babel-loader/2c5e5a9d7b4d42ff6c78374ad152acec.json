{"ast":null,"code":"import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nvar propTypes = {\n  radius: PropTypes.number,\n  padding: PropTypes.number,\n  amount: PropTypes.number,\n  total: PropTypes.number,\n  size: PropTypes.string,\n  gaugePercentages: PropTypes.array,\n  id: PropTypes.string,\n  tooltipId: PropTypes.string,\n  tau: PropTypes.number,\n  labelText: PropTypes.string,\n  valueText: PropTypes.string\n};\nvar defaultProps = {\n  tau: 2 * Math.PI,\n  radius: 80,\n  padding: 30,\n  amount: 75,\n  total: 100,\n  valueText: '75%',\n  labelText: '75 out of 100GB',\n  size: 'full',\n  fillColor: '#00a68f',\n  gaugePercentages: [{\n    low: 0,\n    high: 50,\n    color: '#4B8400'\n  }, {\n    low: 50,\n    high: 75,\n    color: '#EFC100'\n  }, {\n    low: 75,\n    high: 100,\n    color: '#FF5050'\n  }],\n  id: 'gauge-container',\n  tooltipId: 'tooltip-container'\n};\n\nvar GaugeGraph = function (_Component) {\n  _inherits(GaugeGraph, _Component);\n\n  function GaugeGraph() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, GaugeGraph);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = GaugeGraph.__proto__ || _Object$getPrototypeOf(GaugeGraph)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      boxSize: 0,\n      ratio: 0\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(GaugeGraph, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          radius = _props.radius,\n          padding = _props.padding,\n          amount = _props.amount,\n          total = _props.total;\n      this.setState(function () {\n        return {\n          boxSize: (radius + padding) * 2,\n          ratio: amount / total\n        };\n      }, this.initialRender);\n    }\n  }, {\n    key: 'initialRender',\n    value: function initialRender() {\n      var boxSize = this.state.boxSize;\n      var _props2 = this.props,\n          size = _props2.size,\n          padding = _props2.padding,\n          id = _props2.id;\n      this.svg = d3.select('#' + id).attr('width', boxSize).attr('height', size === 'half' ? boxSize / 2 + padding : boxSize).append('g').attr('transform', 'translate(' + boxSize / 2 + ', ' + boxSize / 2 + ')');\n      this.renderSVG();\n      this.renderLabels();\n    }\n  }, {\n    key: 'renderSVG',\n    value: function renderSVG() {\n      var _props3 = this.props,\n          tau = _props3.tau,\n          radius = _props3.radius,\n          size = _props3.size,\n          gaugePercentages = _props3.gaugePercentages,\n          id = _props3.id,\n          fillColor = _props3.fillColor;\n      var ratio = this.state.ratio; // Transition function\n\n      var arcTween = function arcTween(newAngle) {\n        return function (d) {\n          var interpolate = void 0;\n\n          if (size === 'half') {\n            interpolate = d3.interpolate(d.endAngle, Math.PI * (newAngle / tau));\n            var line = d3.select('#' + id + ' .bx--gauge-line');\n            var percent = newAngle / tau * 100;\n            line.style('fill', function () {\n              var color = void 0;\n              gaugePercentages.forEach(function (range) {\n                if (percent >= range.low && percent <= range.high) {\n                  color = range.color;\n                }\n              });\n              return color;\n            });\n          } else {\n            interpolate = d3.interpolate(d.endAngle, newAngle);\n          }\n\n          return function (t) {\n            d.endAngle = interpolate(t);\n            return arc(d);\n          };\n        };\n      };\n\n      var arc = d3.arc().innerRadius(radius).outerRadius(radius - 10).startAngle(0);\n      this.svg.append('path').datum({\n        endAngle: size === 'half' ? Math.PI : tau\n      }).style('fill', '#dfe3e6').attr('d', arc).attr('transform', '' + (size === 'half' ? 'rotate(-90)' : ''));\n      this.svg.append('path').datum({\n        endAngle: 0\n      }).style('fill', fillColor).attr('transform', '' + (size === 'half' ? 'rotate(-90)' : '')).attr('class', 'bx--gauge-line').transition().duration(1000).delay(1000).attrTween('d', arcTween(ratio * tau));\n    }\n  }, {\n    key: 'renderLabels',\n    value: function renderLabels() {\n      var _props4 = this.props,\n          valueText = _props4.valueText,\n          labelText = _props4.labelText,\n          tooltipId = _props4.tooltipId;\n      d3.select('#' + tooltipId + ' .bx--gauge-amount').style('opacity', 0).transition().duration(1000).delay(1500).style('opacity', 1).text('' + valueText);\n      d3.select('#' + tooltipId + ' .bx--gauge-total').style('opacity', 0).transition().duration(1000).delay(1700).style('opacity', 1).text('' + labelText);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props5 = this.props,\n          size = _props5.size,\n          tooltipId = _props5.tooltipId,\n          id = _props5.id;\n      var tooltipStyles = {\n        position: 'absolute',\n        top: '' + (size === 'half' ? '60%' : '50%'),\n        left: '50%',\n        transform: 'translate(-50%, -50%)'\n      };\n      var amountStyles = {\n        textAlign: 'center',\n        fontSize: '30px',\n        fontWeight: '600',\n        lineHeight: '1',\n        margin: '0',\n        marginBottom: '.25rem'\n      };\n      var totalStyles = {\n        fontSize: '14px',\n        margin: '0',\n        lineHeight: '1',\n        whiteSpace: 'nowrap'\n      };\n      return React.createElement('div', {\n        className: 'bx--graph-container',\n        style: {\n          position: 'relative',\n          width: this.state.boxSize\n        }\n      }, React.createElement('svg', {\n        id: id\n      }), React.createElement('div', {\n        className: 'bx--gauge-tooltip',\n        id: tooltipId,\n        style: tooltipStyles\n      }, React.createElement('p', {\n        className: 'bx--gauge-amount',\n        style: amountStyles\n      }, 'Place'), React.createElement('p', {\n        className: 'bx--gauge-total',\n        style: totalStyles\n      }, 'Holder')));\n    }\n  }]);\n\n  return GaugeGraph;\n}(Component);\n\nGaugeGraph.propTypes = propTypes;\nGaugeGraph.defaultProps = defaultProps;\nexport default GaugeGraph;","map":null,"metadata":{},"sourceType":"module"}