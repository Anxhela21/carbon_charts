{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.find\");\n\nrequire(\"core-js/modules/es.array.for-each\");\n\nrequire(\"core-js/modules/es.array.from\");\n\nrequire(\"core-js/modules/es.array.is-array\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.array.reduce\");\n\nrequire(\"core-js/modules/es.date.to-string\");\n\nrequire(\"core-js/modules/es.object.assign\");\n\nrequire(\"core-js/modules/es.object.define-property\");\n\nrequire(\"core-js/modules/es.object.entries\");\n\nrequire(\"core-js/modules/es.object.keys\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.defaultDecorateStory = void 0;\n\nvar _isPlainObject = _interopRequireDefault(require(\"is-plain-object\"));\n\nvar _clientLogger = require(\"@storybook/client-logger\");\n\nvar _addons = _interopRequireDefault(require(\"@storybook/addons\"));\n\nvar _coreEvents = _interopRequireDefault(require(\"@storybook/core-events\"));\n\nvar _utils = require(\"@storybook/router/utils\");\n\nvar _mergeWith = _interopRequireDefault(require(\"lodash/mergeWith\"));\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _subscriptions_store = _interopRequireDefault(require(\"./subscriptions_store\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // merge with concatenating arrays, but no duplicates\n\n\nvar merge = function merge(a, b) {\n  return (0, _mergeWith[\"default\"])({}, a, b, function (objValue, srcValue) {\n    if (Array.isArray(srcValue) && Array.isArray(objValue)) {\n      srcValue.forEach(function (s) {\n        var existing = objValue.find(function (o) {\n          return o === s || (0, _isEqual[\"default\"])(o, s);\n        });\n\n        if (!existing) {\n          objValue.push(s);\n        }\n      });\n      return objValue;\n    }\n\n    if (Array.isArray(objValue)) {\n      _clientLogger.logger.log('the types mismatch, picking', objValue);\n\n      return objValue;\n    }\n\n    return undefined;\n  });\n};\n\nvar defaultDecorateStory = function defaultDecorateStory(storyFn, decorators) {\n  return decorators.reduce(function (decorated, decorator) {\n    return function () {\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return decorator(function () {\n        var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return decorated( // MUTATION !\n        Object.assign(context, p, {\n          parameters: Object.assign(context.parameters || {}, p.parameters)\n        }, {\n          options: Object.assign(context.options || {}, p.options)\n        }));\n      }, context);\n    };\n  }, storyFn);\n};\n\nexports.defaultDecorateStory = defaultDecorateStory;\n\nvar metaSubscription = function metaSubscription() {\n  _addons[\"default\"].getChannel().on(_coreEvents[\"default\"].REGISTER_SUBSCRIPTION, _subscriptions_store[\"default\"].register);\n\n  return function () {\n    return _addons[\"default\"].getChannel().removeListener(_coreEvents[\"default\"].REGISTER_SUBSCRIPTION, _subscriptions_store[\"default\"].register);\n  };\n};\n\nvar withSubscriptionTracking = function withSubscriptionTracking(storyFn) {\n  if (!_addons[\"default\"].hasChannel()) {\n    return storyFn();\n  }\n\n  _subscriptions_store[\"default\"].markAllAsUnused();\n\n  _subscriptions_store[\"default\"].register(metaSubscription);\n\n  var result = storyFn();\n\n  _subscriptions_store[\"default\"].clearUnused();\n\n  return result;\n};\n\nvar ClientApi = function ClientApi() {\n  var _this = this;\n\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      storyStore = _ref.storyStore,\n      _ref$decorateStory = _ref.decorateStory,\n      decorateStory = _ref$decorateStory === void 0 ? defaultDecorateStory : _ref$decorateStory;\n\n  _classCallCheck(this, ClientApi);\n\n  this.setAddon = function (addon) {\n    _this._addons = Object.assign({}, _this._addons, addon);\n  };\n\n  this.getSeparators = function () {\n    return Object.assign({}, {\n      hierarchyRootSeparator: '|',\n      hierarchySeparator: /\\/|\\./\n    }, _this._globalParameters.options);\n  };\n\n  this.addDecorator = function (decorator) {\n    _this._globalDecorators.push(decorator);\n  };\n\n  this.addParameters = function (parameters) {\n    _this._globalParameters = Object.assign({}, _this._globalParameters, parameters, {\n      options: Object.assign({}, merge((0, _get[\"default\"])(_this._globalParameters, 'options', {}), (0, _get[\"default\"])(parameters, 'options', {})))\n    });\n  };\n\n  this.clearDecorators = function () {\n    _this._globalDecorators = [];\n  };\n\n  this.storiesOf = function (kind, m) {\n    if (!kind && typeof kind !== 'string') {\n      throw new Error('Invalid or missing kind provided for stories, should be a string');\n    }\n\n    if (!m) {\n      _clientLogger.logger.warn(\"Missing 'module' parameter for story with a kind of '\".concat(kind, \"'. It will break your HMR\"));\n    }\n\n    if (m && m.hot && m.hot.dispose) {\n      m.hot.dispose(function () {\n        var _storyStore = _this._storyStore;\n\n        _storyStore.remove(); // TODO: refactor this\n        // Maybe not needed at all if stories can just be overwriten ?\n\n\n        _this._storyStore.removeStoryKind(kind);\n\n        _this._storyStore.incrementRevision();\n      });\n    }\n\n    var localDecorators = [];\n    var localParameters = {};\n    var hasAdded = false;\n    var api = {\n      kind: kind\n    }; // apply addons\n\n    Object.keys(_this._addons).forEach(function (name) {\n      var addon = _this._addons[name];\n\n      api[name] = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        addon.apply(api, args);\n        return api;\n      };\n    });\n\n    api.add = function (storyName, storyFn, parameters) {\n      hasAdded = true;\n      var _globalParameters = _this._globalParameters,\n          _globalDecorators = _this._globalDecorators;\n      var id = (0, _utils.toId)(kind, storyName);\n\n      if (typeof storyName !== 'string') {\n        throw new Error(\"Invalid or missing storyName provided for a \\\"\".concat(kind, \"\\\" story.\"));\n      }\n\n      if (m && m.hot && m.hot.dispose) {\n        m.hot.dispose(function () {\n          var _storyStore = _this._storyStore;\n\n          _storyStore.remove(id);\n        });\n      }\n\n      var fileName = m && m.id ? \"\".concat(m.id) : undefined;\n\n      var _this$getSeparators = _this.getSeparators(),\n          hierarchyRootSeparator = _this$getSeparators.hierarchyRootSeparator,\n          hierarchySeparator = _this$getSeparators.hierarchySeparator;\n\n      var baseOptions = {\n        hierarchyRootSeparator: hierarchyRootSeparator,\n        hierarchySeparator: hierarchySeparator\n      };\n      var allParam = [{\n        options: baseOptions\n      }, _globalParameters, localParameters, parameters].reduce(function (acc, p) {\n        if (p) {\n          Object.entries(p).forEach(function (_ref2) {\n            var _ref3 = _slicedToArray(_ref2, 2),\n                key = _ref3[0],\n                value = _ref3[1];\n\n            var existingValue = acc[key];\n\n            if (Array.isArray(value)) {\n              acc[key] = value;\n            } else if ((0, _isPlainObject[\"default\"])(value) && (0, _isPlainObject[\"default\"])(existingValue)) {\n              acc[key] = merge(existingValue, value);\n            } else {\n              acc[key] = value;\n            }\n          });\n        }\n\n        return acc;\n      }, {\n        fileName: fileName\n      });\n\n      _this._storyStore.addStory({\n        id: id,\n        kind: kind,\n        name: storyName,\n        storyFn: storyFn,\n        parameters: allParam\n      }, {\n        applyDecorators: _this._decorateStory,\n        getDecorators: function getDecorators() {\n          return [].concat(_toConsumableArray(allParam.decorators || []), localDecorators, _toConsumableArray(_globalDecorators), [withSubscriptionTracking]);\n        }\n      });\n\n      return api;\n    };\n\n    api.addDecorator = function (decorator) {\n      if (hasAdded) {\n        _clientLogger.logger.warn(\"You have added a decorator to the kind '\".concat(kind, \"' after a story has already been added.\\nIn Storybook 4 this applied the decorator only to subsequent stories. In Storybook 5+ it applies to all stories.\\nThis is probably not what you intended. Read more here: https://github.com/storybookjs/storybook/blob/master/MIGRATION.md\"));\n      }\n\n      localDecorators.push(decorator);\n      return api;\n    };\n\n    api.addParameters = function (parameters) {\n      localParameters = Object.assign({}, localParameters, parameters);\n      return api;\n    };\n\n    return api;\n  };\n\n  this.getStorybook = function () {\n    return _this._storyStore.getStoryKinds().map(function (kind) {\n      var fileName = _this._storyStore.getStoryFileName(kind);\n\n      var stories = _this._storyStore.getStories(kind).map(function (name) {\n        var render = _this._storyStore.getStoryWithContext(kind, name);\n\n        return {\n          name: name,\n          render: render\n        };\n      });\n\n      return {\n        kind: kind,\n        fileName: fileName,\n        stories: stories\n      };\n    });\n  };\n\n  this.raw = function () {\n    return _this._storyStore.raw();\n  };\n\n  this.store = function () {\n    return _this._storyStore;\n  };\n\n  this._storyStore = storyStore;\n  this._addons = {};\n  this._globalDecorators = [];\n  this._globalParameters = {};\n  this._decorateStory = decorateStory;\n\n  if (!storyStore) {\n    throw new Error('storyStore is required');\n  }\n};\n\nexports[\"default\"] = ClientApi;","map":null,"metadata":{},"sourceType":"script"}