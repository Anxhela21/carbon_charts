{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('@carbon/charts')) : typeof define === 'function' && define.amd ? define(['exports', 'react', '@carbon/charts'], factory) : factory(global.chartsReact = {}, global.React, global.charts);\n})(this, function (exports, React, charts) {\n  'use strict';\n\n  React = React && React.hasOwnProperty('default') ? React['default'] : React;\n\n  var classCallCheck = function classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var inherits = function inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  };\n\n  var possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  };\n\n  var BaseChart = function (_React$Component) {\n    inherits(BaseChart, _React$Component);\n\n    function BaseChart(props) {\n      classCallCheck(this, BaseChart);\n\n      var _this = possibleConstructorReturn(this, (BaseChart.__proto__ || Object.getPrototypeOf(BaseChart)).call(this, props));\n\n      _this.data = props.data;\n      _this.options = props.options; // Width prop is mandatory for the wrappers\n\n      if (props.width) {\n        _this.options.width = props.width;\n      } else if (!_this.options.width) {\n        console.error(\"Missing `width` prop!\");\n      } // Height prop is mandatory for the wrappers\n\n\n      if (props.height) {\n        _this.options.height = props.height;\n      } else if (!_this.options.height) {\n        console.error(\"Missing `height` prop!\");\n      }\n\n      Object.assign(_this, _this.chart);\n      return _this;\n    }\n\n    createClass(BaseChart, [{\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        this.chart.setData(this.props.data);\n      }\n    }]);\n    return BaseChart;\n  }(React.Component);\n\n  var PieChart = function (_BaseChart) {\n    inherits(PieChart, _BaseChart);\n\n    function PieChart() {\n      classCallCheck(this, PieChart);\n      return possibleConstructorReturn(this, (PieChart.__proto__ || Object.getPrototypeOf(PieChart)).apply(this, arguments));\n    }\n\n    createClass(PieChart, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.chart = new charts.PieChart(this.chartRef, {\n          data: this.props.data,\n          options: this.props.options\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        return React.createElement(\"div\", {\n          ref: function ref(chartRef) {\n            return _this2.chartRef = chartRef;\n          },\n          className: \"chart-holder\"\n        });\n      }\n    }]);\n    return PieChart;\n  }(BaseChart);\n\n  var DonutChart = function (_BaseChart) {\n    inherits(DonutChart, _BaseChart);\n\n    function DonutChart() {\n      classCallCheck(this, DonutChart);\n      return possibleConstructorReturn(this, (DonutChart.__proto__ || Object.getPrototypeOf(DonutChart)).apply(this, arguments));\n    }\n\n    createClass(DonutChart, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.chart = new charts.DonutChart(this.chartRef, {\n          data: this.props.data,\n          options: this.props.options\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        return React.createElement(\"div\", {\n          ref: function ref(chartRef) {\n            return _this2.chartRef = chartRef;\n          },\n          className: \"chart-holder\"\n        });\n      }\n    }]);\n    return DonutChart;\n  }(BaseChart);\n\n  var LineChart = function (_BaseChart) {\n    inherits(LineChart, _BaseChart);\n\n    function LineChart() {\n      classCallCheck(this, LineChart);\n      return possibleConstructorReturn(this, (LineChart.__proto__ || Object.getPrototypeOf(LineChart)).apply(this, arguments));\n    }\n\n    createClass(LineChart, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.chart = new charts.LineChart(this.chartRef, {\n          data: this.props.data,\n          options: this.props.options\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        return React.createElement(\"div\", {\n          ref: function ref(chartRef) {\n            return _this2.chartRef = chartRef;\n          },\n          className: \"chart-holder\"\n        });\n      }\n    }]);\n    return LineChart;\n  }(BaseChart);\n\n  var BarChart = function (_BaseChart) {\n    inherits(BarChart, _BaseChart);\n\n    function BarChart() {\n      classCallCheck(this, BarChart);\n      return possibleConstructorReturn(this, (BarChart.__proto__ || Object.getPrototypeOf(BarChart)).apply(this, arguments));\n    }\n\n    createClass(BarChart, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.chart = new charts.BarChart(this.chartRef, {\n          data: this.props.data,\n          options: this.props.options\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        return React.createElement(\"div\", {\n          ref: function ref(chartRef) {\n            return _this2.chartRef = chartRef;\n          },\n          className: \"chart-holder\"\n        });\n      }\n    }]);\n    return BarChart;\n  }(BaseChart);\n\n  exports.PieChart = PieChart;\n  exports.DonutChart = DonutChart;\n  exports.LineChart = LineChart;\n  exports.BarChart = BarChart;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}