{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.array.index-of\");\n\nrequire(\"core-js/modules/es.function.name\");\n\nrequire(\"core-js/modules/es.object.assign\");\n\nrequire(\"core-js/modules/es.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = start;\nexports.getContext = void 0;\n\nvar _addons = _interopRequireDefault(require(\"@storybook/addons\"));\n\nvar _global = require(\"global\");\n\nvar _channelPostmessage = _interopRequireDefault(require(\"@storybook/channel-postmessage\"));\n\nvar _clientApi2 = require(\"@storybook/client-api\");\n\nvar _utils = require(\"@storybook/router/utils\");\n\nvar _clientLogger = require(\"@storybook/client-logger\");\n\nvar _coreEvents = _interopRequireDefault(require(\"@storybook/core-events\"));\n\nvar _utilDeprecate = _interopRequireDefault(require(\"util-deprecate\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar classes = {\n  MAIN: 'sb-show-main',\n  NOPREVIEW: 'sb-show-nopreview',\n  ERROR: 'sb-show-errordisplay'\n};\n\nfunction showMain() {\n  _global.document.body.classList.remove(classes.NOPREVIEW);\n\n  _global.document.body.classList.remove(classes.ERROR);\n\n  _global.document.body.classList.add(classes.MAIN);\n}\n\nfunction showNopreview() {\n  _global.document.body.classList.remove(classes.MAIN);\n\n  _global.document.body.classList.remove(classes.ERROR);\n\n  _global.document.body.classList.add(classes.NOPREVIEW);\n}\n\nfunction showErrorDisplay(_ref) {\n  var message = _ref.message,\n      stack = _ref.stack;\n  _global.document.getElementById('error-message').textContent = message;\n  _global.document.getElementById('error-stack').textContent = stack;\n\n  _global.document.body.classList.remove(classes.MAIN);\n\n  _global.document.body.classList.remove(classes.NOPREVIEW);\n\n  _global.document.body.classList.add(classes.ERROR);\n} // showError is used by the various app layers to inform the user they have done something\n// wrong -- for instance returned the wrong thing from a story\n\n\nfunction showError(_ref2) {\n  var title = _ref2.title,\n      description = _ref2.description;\n\n  _addons[\"default\"].getChannel().emit(_coreEvents[\"default\"].STORY_ERRORED, {\n    title: title,\n    description: description\n  });\n\n  showErrorDisplay({\n    message: title,\n    stack: description\n  });\n} // showException is used if we fail to render the story and it is uncaught by the app layer\n\n\nfunction showException(exception) {\n  _addons[\"default\"].getChannel().emit(_coreEvents[\"default\"].STORY_THREW_EXCEPTION, exception);\n\n  showErrorDisplay(exception); // Log the stack to the console. So, user could check the source code.\n\n  _clientLogger.logger.error(exception.stack);\n}\n\nvar isBrowser = _global.navigator && _global.navigator.userAgent && _global.navigator.userAgent !== 'storyshots' && !(_global.navigator.userAgent.indexOf('Node.js') > -1) && !(_global.navigator.userAgent.indexOf('jsdom') > -1);\n\nvar getContext = function () {\n  var cache;\n  return function (decorateStory) {\n    if (cache) {\n      return cache;\n    }\n\n    var channel = null;\n\n    if (isBrowser) {\n      try {\n        channel = _addons[\"default\"].getChannel();\n      } catch (e) {\n        channel = (0, _channelPostmessage[\"default\"])({\n          page: 'preview'\n        });\n\n        _addons[\"default\"].setChannel(channel);\n      }\n    }\n\n    var storyStore;\n    var clientApi;\n\n    if (typeof _global.window !== 'undefined' && _global.window.__STORYBOOK_CLIENT_API__) {\n      clientApi = _global.window.__STORYBOOK_CLIENT_API__; // eslint-disable-next-line no-underscore-dangle\n\n      storyStore = clientApi._storyStore;\n    } else {\n      storyStore = new _clientApi2.StoryStore({\n        channel: channel\n      });\n      clientApi = new _clientApi2.ClientApi({\n        storyStore: storyStore,\n        decorateStory: decorateStory\n      });\n    }\n\n    var _clientApi = clientApi,\n        clearDecorators = _clientApi.clearDecorators;\n    var configApi = new _clientApi2.ConfigApi({\n      clearDecorators: clearDecorators,\n      storyStore: storyStore,\n      channel: channel,\n      clientApi: clientApi\n    });\n    return {\n      configApi: configApi,\n      storyStore: storyStore,\n      channel: channel,\n      clientApi: clientApi,\n      showMain: showMain,\n      showError: showError,\n      showException: showException\n    };\n  };\n}();\n\nexports.getContext = getContext;\n\nfunction focusInInput(event) {\n  return /input|textarea/i.test(event.target.tagName) || event.target.getAttribute('contenteditable') !== null;\n}\n\nfunction start(render) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      decorateStory = _ref3.decorateStory;\n\n  var context = getContext(decorateStory);\n  var clientApi = context.clientApi,\n      channel = context.channel,\n      configApi = context.configApi,\n      storyStore = context.storyStore; // Provide access to external scripts if `window` is defined.\n  // NOTE this is different to isBrowser, primarily for the JSDOM use case\n\n  var previousKind = '';\n  var previousStory = '';\n  var previousRevision = -1;\n\n  var renderMain = function renderMain(forceRender) {\n    var revision = storyStore.getRevision();\n    var selection = storyStore.getSelection();\n\n    var _ref4 = selection || {},\n        kind = _ref4.kind,\n        name = _ref4.name,\n        getDecorated = _ref4.getDecorated,\n        id = _ref4.id;\n\n    if (getDecorated) {\n      // Render story only if selectedKind or selectedStory have changed.\n      // However, we DO want the story to re-render if the store itself has changed\n      // (which happens at the moment when HMR occurs)\n      if (!forceRender && revision === previousRevision && kind === previousKind && previousStory === name) {\n        _addons[\"default\"].getChannel().emit(_coreEvents[\"default\"].STORY_UNCHANGED, id);\n\n        return;\n      }\n\n      if (!forceRender && previousKind && previousStory) {\n        _addons[\"default\"].getChannel().emit(_coreEvents[\"default\"].STORY_CHANGED, id);\n      }\n\n      render(Object.assign({}, context, selection, {\n        selectedKind: kind,\n        selectedStory: name,\n        forceRender: forceRender\n      }));\n\n      _addons[\"default\"].getChannel().emit(_coreEvents[\"default\"].STORY_RENDERED, id);\n    } else {\n      showNopreview();\n\n      _addons[\"default\"].getChannel().emit(_coreEvents[\"default\"].STORY_MISSING, id);\n    }\n\n    previousRevision = revision;\n    previousKind = kind;\n    previousStory = name;\n\n    if (!forceRender) {\n      _global.document.documentElement.scrollTop = 0;\n    }\n  }; // initialize the UI\n\n\n  var renderUI = function renderUI(forceRender) {\n    if (isBrowser) {\n      try {\n        renderMain(forceRender);\n      } catch (ex) {\n        showException(ex);\n      }\n    }\n  };\n\n  var forceReRender = function forceReRender() {\n    return renderUI(true);\n  }; // channel can be null in NodeJS\n\n\n  if (isBrowser) {\n    var deprecatedToId = (0, _utilDeprecate[\"default\"])(_utils.toId, \"Passing name+kind to the SET_CURRENT_STORY event is deprecated, use a storyId instead\");\n    channel.on(_coreEvents[\"default\"].FORCE_RE_RENDER, forceReRender);\n    channel.on(_coreEvents[\"default\"].SET_CURRENT_STORY, function (_ref5) {\n      var inputStoryId = _ref5.storyId,\n          name = _ref5.name,\n          kind = _ref5.kind;\n      var storyId = inputStoryId; // For backwards compatibility\n\n      if (!storyId) {\n        if (!name || !kind) {\n          throw new Error('You should pass `storyId` into SET_CURRENT_STORY');\n        }\n\n        storyId = deprecatedToId(kind, name);\n      }\n\n      var data = storyStore.fromId(storyId);\n      storyStore.setSelection(data);\n      storyStore.setPath(storyId);\n    }); // Handle keyboard shortcuts\n\n    _global.window.onkeydown = function (event) {\n      if (!focusInInput(event)) {\n        // We have to pick off the keys of the event that we need on the other side\n        var altKey = event.altKey,\n            ctrlKey = event.ctrlKey,\n            metaKey = event.metaKey,\n            shiftKey = event.shiftKey,\n            key = event.key,\n            code = event.code,\n            keyCode = event.keyCode;\n        channel.emit(_coreEvents[\"default\"].PREVIEW_KEYDOWN, {\n          event: {\n            altKey: altKey,\n            ctrlKey: ctrlKey,\n            metaKey: metaKey,\n            shiftKey: shiftKey,\n            key: key,\n            code: code,\n            keyCode: keyCode\n          }\n        });\n      }\n    };\n  }\n\n  storyStore.on(_coreEvents[\"default\"].STORY_RENDER, renderUI);\n\n  if (typeof _global.window !== 'undefined') {\n    _global.window.__STORYBOOK_CLIENT_API__ = clientApi;\n    _global.window.__STORYBOOK_ADDONS_CHANNEL__ = channel; // may not be defined\n  }\n\n  return {\n    context: context,\n    clientApi: clientApi,\n    configApi: configApi,\n    forceReRender: forceReRender\n  };\n}","map":null,"metadata":{},"sourceType":"script"}