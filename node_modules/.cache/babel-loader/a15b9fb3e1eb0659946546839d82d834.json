{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.is-array\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.object.assign\");\n\nrequire(\"core-js/modules/es.object.define-property\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.match\");\n\nrequire(\"core-js/modules/es.string.replace\");\n\nrequire(\"core-js/modules/es.string.search\");\n\nrequire(\"core-js/modules/es.string.split\");\n\nrequire(\"core-js/modules/es.string.starts-with\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseKind = exports.getMatch = exports.stringifyQuery = exports.queryFromLocation = exports.queryFromString = exports.parsePath = exports.toId = exports.sanitize = exports.knownNonViewModesRegex = void 0;\n\nvar _qs = _interopRequireDefault(require(\"qs\"));\n\nvar _memoizerific = _interopRequireDefault(require(\"memoizerific\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar knownNonViewModesRegex = /(settings)/;\nexports.knownNonViewModesRegex = knownNonViewModesRegex;\nvar splitPathRegex = /\\/([^/]+)\\/([^/]+)?/; // Remove punctuation https://gist.github.com/davidjrice/9d2af51100e41c6c4b4a\n\nvar sanitize = function sanitize(string) {\n  return string.toLowerCase() // eslint-disable-next-line no-useless-escape\n  .replace(/[ ’–—―′¿'`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, '-').replace(/-+/g, '-').replace(/^-+/, '').replace(/-+$/, '');\n};\n\nexports.sanitize = sanitize;\n\nvar sanitizeSafe = function sanitizeSafe(string, part) {\n  var sanitized = sanitize(string);\n\n  if (sanitized === '') {\n    throw new Error(\"Invalid \".concat(part, \" '\").concat(string, \"', must include alphanumeric characters\"));\n  }\n\n  return sanitized;\n};\n\nvar toId = function toId(kind, name) {\n  return \"\".concat(sanitizeSafe(kind, 'kind'), \"--\").concat(sanitizeSafe(name, 'name'));\n};\n\nexports.toId = toId;\nvar parsePath = (0, _memoizerific[\"default\"])(1000)(function (path) {\n  var result = {\n    viewMode: undefined,\n    storyId: undefined\n  };\n\n  if (path) {\n    var _ref = path.match(splitPathRegex) || [undefined, undefined, undefined],\n        _ref2 = _slicedToArray(_ref, 3),\n        viewMode = _ref2[1],\n        storyId = _ref2[2];\n\n    if (viewMode && !viewMode.match(knownNonViewModesRegex)) {\n      Object.assign(result, {\n        viewMode: viewMode,\n        storyId: storyId\n      });\n    }\n  }\n\n  return result;\n});\nexports.parsePath = parsePath;\nvar queryFromString = (0, _memoizerific[\"default\"])(1000)(function (s) {\n  return _qs[\"default\"].parse(s, {\n    ignoreQueryPrefix: true\n  });\n});\nexports.queryFromString = queryFromString;\n\nvar queryFromLocation = function queryFromLocation(location) {\n  return queryFromString(location.search);\n};\n\nexports.queryFromLocation = queryFromLocation;\n\nvar stringifyQuery = function stringifyQuery(query) {\n  return _qs[\"default\"].stringify(query, {\n    addQueryPrefix: true,\n    encode: false\n  });\n};\n\nexports.stringifyQuery = stringifyQuery;\nvar getMatch = (0, _memoizerific[\"default\"])(1000)(function (current, target) {\n  var startsWith = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var startsWithTarget = current && startsWith && current.startsWith(target);\n  var currentIsTarget = typeof target === 'string' && current === target;\n  var matchTarget = current && target && current.match(target);\n\n  if (startsWithTarget || currentIsTarget || matchTarget) {\n    return {\n      path: current\n    };\n  }\n\n  return null;\n});\nexports.getMatch = getMatch;\n\nvar parseKind = function parseKind(kind, _ref3) {\n  var rootSeparator = _ref3.rootSeparator,\n      groupSeparator = _ref3.groupSeparator;\n\n  var _kind$split = kind.split(rootSeparator, 2),\n      _kind$split2 = _slicedToArray(_kind$split, 2),\n      root = _kind$split2[0],\n      remainder = _kind$split2[1];\n\n  var groups = (remainder || kind).split(groupSeparator).filter(function (i) {\n    return !!i;\n  }); // when there's no remainder, it means the root wasn't found/split\n\n  return {\n    root: remainder ? root : null,\n    groups: groups\n  };\n};\n\nexports.parseKind = parseKind;","map":null,"metadata":{},"sourceType":"script"}