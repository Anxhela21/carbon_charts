{"ast":null,"code":"import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport DataTooltip from '../DataTooltip/DataTooltip';\nimport * as d3 from 'd3';\nimport _ from 'lodash';\nvar propTypes = {\n  data: PropTypes.array,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  id: PropTypes.string,\n  containerId: PropTypes.string,\n  margin: PropTypes.object,\n  labelOffsetX: PropTypes.number,\n  labelOffsetY: PropTypes.number,\n  axisOffset: PropTypes.number,\n  timeFormat: PropTypes.string,\n  xAxisLabel: PropTypes.string,\n  yAxisLabel: PropTypes.string,\n  onHover: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  emptyText: PropTypes.string,\n  color: PropTypes.array,\n  showTooltip: PropTypes.bool,\n  maxValueY: PropTypes.number\n};\nvar defaultProps = {\n  data: [[12, 1507563900000]],\n  height: 300,\n  width: 800,\n  id: 'container',\n  containerId: 'graph-container',\n  margin: {\n    top: 30,\n    right: 20,\n    bottom: 70,\n    left: 65\n  },\n  labelOffsetX: 65,\n  labelOffsetY: 55,\n  axisOffset: 16,\n  timeFormat: null,\n  xAxisLabel: 'X Axis',\n  yAxisLabel: 'Y Axis',\n  onHover: function onHover() {},\n  emptyText: 'There is currently no data available for the parameters selected. Please try a different combination.',\n  color: ['#00A78F', '#3b1a40', '#473793', '#3c6df0', '#56D2BB'],\n  showTooltip: true\n};\n\nvar BarGraph = function (_Component) {\n  _inherits(BarGraph, _Component);\n\n  function BarGraph() {\n    _classCallCheck(this, BarGraph);\n\n    return _possibleConstructorReturn(this, (BarGraph.__proto__ || _Object$getPrototypeOf(BarGraph)).apply(this, arguments));\n  }\n\n  _createClass(BarGraph, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          width = _props.width,\n          height = _props.height,\n          margin = _props.margin,\n          containerId = _props.containerId,\n          emptyText = _props.emptyText;\n      this.emptyContainer = d3.select('#' + containerId + ' .bx--bar-graph-empty-text').text(emptyText).style('position', 'absolute').style('top', '50%').style('left', '50%').style('text-align', 'center').style('transform', 'translate(-50%, -50%)');\n      this.svg = d3.select('#' + containerId + ' svg').attr('class', 'bx--graph').attr('width', width).attr('height', height).append('g').attr('class', 'bx--group-container').attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');\n      this.width = width - (margin.left + margin.right);\n      this.height = height - (margin.top + margin.bottom);\n      this.color = d3.scaleOrdinal(this.props.color);\n      this.initialRender();\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.height != this.props.height || nextProps.width != this.props.width) {\n        this.resize(nextProps.height, nextProps.width);\n      }\n    }\n  }, {\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate(nextProps) {\n      var maxValueY = this.props.maxValueY;\n\n      if (this.x) {\n        this.x.domain(nextProps.data.map(function (d) {\n          return d[1];\n        }));\n\n        if (this.isGrouped) {\n          var dataLength = nextProps.data[0][0].length;\n          this.x1.rangeRound([0, this.x.bandwidth()]).domain(d3.range(dataLength));\n          this.y.domain([0, maxValueY || d3.max(nextProps.data, function (d) {\n            return d3.max(d[0], function (i) {\n              return i;\n            });\n          })]);\n        } else {\n          this.y.domain([0, maxValueY || d3.max(nextProps.data, function (d) {\n            return d[0];\n          })]);\n        }\n\n        this.updateEmptyState(nextProps.data);\n        this.updateData(nextProps);\n      }\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps) {\n      return !_.isEqual(this.props, nextProps);\n    }\n  }, {\n    key: 'initialRender',\n    value: function initialRender() {\n      var _props2 = this.props,\n          data = _props2.data,\n          timeFormat = _props2.timeFormat,\n          maxValueY = _props2.maxValueY;\n      this.updateEmptyState(data);\n      var dataLength = data[0][0].length;\n      this.isGrouped = dataLength > 1;\n      this.x = d3.scaleBand().rangeRound([0, this.width]).domain(data.map(function (d) {\n        return d[1];\n      })).padding(0.3);\n\n      if (this.isGrouped) {\n        this.x1 = d3.scaleBand().rangeRound([0, this.x.bandwidth()]).domain(d3.range(dataLength)).padding(0.05);\n        this.y = d3.scaleLinear().range([this.height, 0]).domain([0, maxValueY || d3.max(data, function (d) {\n          return d3.max(d[0], function (i) {\n            return i;\n          });\n        })]);\n      } else {\n        this.y = d3.scaleLinear().range([this.height, 0]).domain([0, maxValueY || d3.max(data, function (d) {\n          return d[0];\n        })]);\n      }\n\n      this.xAxis = d3.axisBottom().scale(this.x).tickSize(0);\n\n      if (timeFormat !== null) {\n        this.xAxis.tickFormat(d3.timeFormat(timeFormat));\n      }\n\n      this.yAxis = d3.axisLeft().ticks(4).tickSize(-this.width).scale(this.y.nice());\n      this.renderAxes();\n      this.renderLabels();\n\n      if (this.x) {\n        this.renderBars();\n      }\n    }\n  }, {\n    key: 'renderAxes',\n    value: function renderAxes() {\n      var axisOffset = this.props.axisOffset;\n      this.svg.append('g').attr('class', 'bx--axis bx--axis--y').attr('stroke-dasharray', '4').call(this.yAxis).selectAll('text').attr('x', -axisOffset);\n      this.svg.append('g').attr('class', 'bx--axis bx--axis--x').attr('transform', 'translate(0, ' + this.height + ')').call(this.xAxis).selectAll('text').attr('y', axisOffset).style('text-anchor', 'middle');\n      this.updateStyles();\n    }\n  }, {\n    key: 'renderBars',\n    value: function renderBars() {\n      var _this2 = this;\n\n      var data = this.props.data;\n      var barContainer = this.svg.append('g').attr('class', 'bar-container');\n\n      if (data.length > 1) {\n        if (this.isGrouped) {\n          this.count = 0;\n          barContainer.selectAll('g').data(data).enter().append('g').attr('transform', function (d) {\n            return 'translate(' + _this2.x(d[1]) + ', 0)';\n          }).selectAll('rect').data(function (d) {\n            _this2.count++;\n            var itemLabel = d[1];\n            return d[0].map(function (key, index) {\n              return {\n                key: key,\n                index: index,\n                group: _this2.count - 1,\n                itemLabel: itemLabel\n              };\n            });\n          }).enter().append('rect').attr('class', 'bar').attr('x', function (d) {\n            return _this2.x1(d.index);\n          }).attr('y', this.height).attr('width', this.x1.bandwidth()).attr('height', 0).attr('fill', function (d) {\n            return _this2.color(d.index);\n          }).attr('data-bar', function (d) {\n            return d.index + '-' + d.group;\n          }).transition().duration(500).delay(function (d, i) {\n            return i * 50;\n          }).attr('y', function (d) {\n            return _this2.y(d.key);\n          }).attr('height', function (d) {\n            return _this2.height - _this2.y(d.key);\n          });\n        } else {\n          barContainer.selectAll('rect').data(data).enter().append('rect').attr('class', 'bar').attr('x', function (d) {\n            return _this2.x(d[1]);\n          }).attr('y', this.height).attr('height', 0).attr('width', this.x.bandwidth()).attr('fill', this.color(0)).attr('data-bar', function (d, i) {\n            return i + '-0';\n          }).transition().duration(500).delay(function (d, i) {\n            return i * 50;\n          }).attr('y', function (d) {\n            return _this2.y(d[0]);\n          }).attr('height', function (d) {\n            return _this2.height - _this2.y(d[0]);\n          });\n        }\n\n        barContainer.selectAll('rect').on('mouseover', function (d, i) {\n          return _this2.onMouseEnter(d, i);\n        }).on('mouseout', function (d, i) {\n          return _this2.onMouseOut(d, i);\n        });\n      }\n    }\n  }, {\n    key: 'renderLabels',\n    value: function renderLabels() {\n      var _props3 = this.props,\n          labelOffsetY = _props3.labelOffsetY,\n          labelOffsetX = _props3.labelOffsetX,\n          xAxisLabel = _props3.xAxisLabel,\n          yAxisLabel = _props3.yAxisLabel;\n      this.svg.select('.bx--axis--y').append('text').text('' + yAxisLabel).attr('class', 'bx--graph-label').attr('transform', 'translate(' + -labelOffsetY + ', ' + this.height / 2 + ') rotate(-90)');\n      this.svg.select('.bx--axis--x').append('text').text('' + xAxisLabel).attr('class', 'bx--graph-label').attr('transform', 'translate(' + this.width / 2 + ', ' + labelOffsetX + ')');\n      this.svg.selectAll('.bx--graph-label').attr('font-size', '10').attr('font-weight', '700').attr('fill', '#5A6872').attr('text-anchor', 'middle');\n    }\n  }, {\n    key: 'getMouseData',\n    value: function getMouseData(d, i) {\n      var mouseData = void 0;\n\n      if (d.key) {\n        mouseData = {\n          data: [d.key],\n          index: d.index,\n          group: d.group,\n          label: d.itemLabel\n        };\n      } else {\n        mouseData = {\n          data: [d[0][0]] || [d[0]],\n          index: i,\n          group: 0,\n          label: d[1]\n        };\n      }\n\n      return mouseData;\n    }\n  }, {\n    key: 'onMouseEnter',\n    value: function onMouseEnter(d, i) {\n      var _props4 = this.props,\n          timeFormat = _props4.timeFormat,\n          showTooltip = _props4.showTooltip,\n          height = _props4.height,\n          labelOffsetX = _props4.labelOffsetX,\n          seriesLabels = _props4.seriesLabels;\n      var mouseData = this.getMouseData(d, i);\n      var rect = this.svg.select('rect[data-bar=\"' + mouseData.index + '-' + mouseData.group + '\"]');\n      rect.attr('fill', d3.color(rect.attr('fill')).darker());\n      var xVal = mouseData.label;\n\n      if (timeFormat) {\n        var format = d3.timeFormat(timeFormat);\n        mouseData.label = format(mouseData.label);\n      }\n\n      this.props.onHover(mouseData);\n\n      if (showTooltip) {\n        ReactDOM.render(React.createElement(DataTooltip, {\n          data: [{\n            data: mouseData.data[0],\n            label: seriesLabels ? seriesLabels[mouseData.index] : mouseData.label,\n            color: rect.attr('fill')\n          }]\n        }), this.tooltipId);\n        var tooltipSize = d3.select(this.tooltipId.children[0]).node().getBoundingClientRect();\n        var offset = -tooltipSize.width / 2;\n        d3.select(this.tooltipId).style('position', 'relative').style('left', this.x(xVal) + (this.x1 ? this.x1(mouseData.index) : 0) + labelOffsetX + offset + (this.x1 ? this.x1.bandwidth() / 2 : this.x.bandwidth() / 2) + 'px').style('top', this.y(mouseData.data[0]) - height - tooltipSize.height + 10 + 'px');\n      }\n    }\n  }, {\n    key: 'onMouseOut',\n    value: function onMouseOut(d, i) {\n      var _this3 = this;\n\n      var mouseData = this.getMouseData(d, i);\n      var rect = this.svg.select('rect[data-bar=\"' + mouseData.index + '-' + mouseData.group + '\"]');\n      rect.transition().duration(500).attr('fill', function () {\n        return _this3.isGrouped ? _this3.color(mouseData.index) : _this3.color(0);\n      });\n      ReactDOM.unmountComponentAtNode(this.tooltipId);\n    }\n  }, {\n    key: 'resize',\n    value: function resize(height, width) {\n      var _props5 = this.props,\n          margin = _props5.margin,\n          containerId = _props5.containerId;\n      this.height = height - (margin.top + margin.bottom);\n      this.width = width - (margin.left + margin.right);\n      this.svg.selectAll('*').remove();\n      this.svg = d3.select('#' + containerId + ' svg').attr('class', 'bx--graph').attr('width', width).attr('height', height).append('g').attr('class', 'bx--group-container').attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');\n      this.initialRender();\n    }\n  }, {\n    key: 'updateData',\n    value: function updateData(nextProps) {\n      var axisOffset = nextProps.axisOffset,\n          xAxisLabel = nextProps.xAxisLabel,\n          yAxisLabel = nextProps.yAxisLabel;\n      this.svg.selectAll('g.bar-container').remove();\n      this.svg.select('.bx--axis--y').transition().call(this.yAxis).selectAll('text').attr('x', -axisOffset);\n      this.svg.select('.bx--axis--y .bx--graph-label').text(yAxisLabel);\n      this.svg.select('.bx--axis--x').transition().call(this.xAxis).selectAll('.bx--axis--x .tick text').attr('y', axisOffset).style('text-anchor', 'middle');\n      this.svg.select('.bx--axis--x .bx--graph-label').text(xAxisLabel);\n      this.updateStyles();\n    }\n  }, {\n    key: 'updateEmptyState',\n    value: function updateEmptyState(data) {\n      if (data.length < 2) {\n        this.svg.style('opacity', '.3');\n        this.emptyContainer.style('display', 'inline-block');\n      } else {\n        this.svg.style('opacity', '1');\n        this.emptyContainer.style('display', 'none');\n      }\n    }\n  }, {\n    key: 'updateStyles',\n    value: function updateStyles() {\n      this.svg.selectAll('.bx--axis--y path').style('display', 'none');\n      this.svg.selectAll('.bx--axis path').attr('stroke', '#5A6872');\n      this.svg.selectAll('.tick line').attr('stroke', '#5A6872');\n      this.svg.selectAll('.tick text').attr('fill', '#5A6872');\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var _props6 = this.props,\n          id = _props6.id,\n          containerId = _props6.containerId;\n\n      if (this.x) {\n        this.renderBars();\n      }\n\n      return React.createElement('div', {\n        className: 'bx--graph-container',\n        id: containerId,\n        style: {\n          position: 'relative'\n        }\n      }, React.createElement('p', {\n        className: 'bx--bar-graph-empty-text'\n      }), React.createElement('svg', {\n        id: id,\n        ref: function ref(id) {\n          return _this4.id = id;\n        }\n      }), React.createElement('div', {\n        id: 'tooltip-div',\n        ref: function ref(id) {\n          return _this4.tooltipId = id;\n        }\n      }));\n    }\n  }]);\n\n  return BarGraph;\n}(Component);\n\nBarGraph.propTypes = propTypes;\nBarGraph.defaultProps = defaultProps;\nexport default BarGraph;","map":null,"metadata":{},"sourceType":"module"}