{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = exports.stringify = exports.isJSON = exports.reviver = exports.replacer = void 0;\n\nvar _global = require(\"global\");\n\nvar _isRegex = _interopRequireDefault(require(\"is-regex\"));\n\nvar _isFunction = _interopRequireDefault(require(\"is-function\"));\n\nvar _isSymbol = _interopRequireDefault(require(\"is-symbol\"));\n\nvar _isobject = _interopRequireDefault(require(\"isobject\"));\n\nvar _get = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _memoizerific = _interopRequireDefault(require(\"memoizerific\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar removeCodeComments = function removeCodeComments(code) {\n  var inQuoteChar = null;\n  var inBlockComment = false;\n  var inLineComment = false;\n  var inRegexLiteral = false;\n  var newCode = '';\n\n  if (code.indexOf('//') >= 0 || code.indexOf('/*') >= 0) {\n    for (var i = 0; i < code.length; i += 1) {\n      if (!inQuoteChar && !inBlockComment && !inLineComment && !inRegexLiteral) {\n        if (code[i] === '\"' || code[i] === \"'\" || code[i] === '`') {\n          inQuoteChar = code[i];\n        } else if (code[i] === '/' && code[i + 1] === '*') {\n          inBlockComment = true;\n        } else if (code[i] === '/' && code[i + 1] === '/') {\n          inLineComment = true;\n        } else if (code[i] === '/' && code[i + 1] !== '/') {\n          inRegexLiteral = true;\n        }\n      } else {\n        if (inQuoteChar && (code[i] === inQuoteChar && code[i - 1] !== '\\\\' || code[i] === '\\n' && inQuoteChar !== '`')) {\n          inQuoteChar = null;\n        }\n\n        if (inRegexLiteral && (code[i] === '/' && code[i - 1] !== '\\\\' || code[i] === '\\n')) {\n          inRegexLiteral = false;\n        }\n\n        if (inBlockComment && code[i - 1] === '/' && code[i - 2] === '*') {\n          inBlockComment = false;\n        }\n\n        if (inLineComment && code[i] === '\\n') {\n          inLineComment = false;\n        }\n      }\n\n      if (!inBlockComment && !inLineComment) {\n        newCode += code[i];\n      }\n    }\n  } else {\n    newCode = code;\n  }\n\n  return newCode;\n};\n\nvar cleanCode = (0, _memoizerific.default)(10000)(function (code) {\n  return removeCodeComments(code).replace(/\\n\\s*/g, '') // remove indents & newlines\n  .trim();\n});\nvar dateFormat = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$/;\n\nvar replacer = function replacer(options) {\n  var objects;\n  var stack;\n  var keys;\n  return function replace(key, value) {\n    //  very first iteration\n    if (key === '') {\n      keys = ['root'];\n      objects = [{\n        keys: 'root',\n        value: value\n      }];\n      stack = [];\n      return value;\n    } // From the JSON.stringify's doc:\n    // \"The object in which the key was found is provided as the replacer's this parameter.\" thus one can control the depth\n\n\n    while (stack.length && this !== stack[0]) {\n      stack.shift();\n      keys.pop();\n    }\n\n    if ((0, _isRegex.default)(value)) {\n      if (!options.allowRegExp) {\n        return undefined;\n      }\n\n      return \"_regexp_\".concat(value.flags, \"|\").concat(value.source);\n    }\n\n    if ((0, _isFunction.default)(value)) {\n      if (!options.allowFunction) {\n        return undefined;\n      }\n\n      var name = value.name;\n      var stringified = value.toString();\n\n      if (!stringified.match(/(\\[native code\\]|WEBPACK_IMPORTED_MODULE|__webpack_exports__|__webpack_require__)/)) {\n        return \"_function_\".concat(name, \"|\").concat(cleanCode(stringified));\n      }\n\n      return \"_function_\".concat(name, \"|\").concat(function () {}.toString());\n    }\n\n    if ((0, _isSymbol.default)(value)) {\n      if (!options.allowSymbol) {\n        return undefined;\n      }\n\n      return \"_symbol_\".concat(value.toString().slice(7, -1));\n    }\n\n    if (typeof value === 'string' && dateFormat.test(value)) {\n      if (!options.allowDate) {\n        return undefined;\n      }\n\n      return \"_date_\".concat(value);\n    }\n\n    if (value === undefined) {\n      if (!options.allowUndefined) {\n        return undefined;\n      }\n\n      return '_undefined_';\n    }\n\n    if (typeof value === 'number') {\n      if (value === -Infinity) {\n        return '_-Infinity_';\n      }\n\n      if (value === Infinity) {\n        return '_Infinity_';\n      }\n\n      if (Number.isNaN(value)) {\n        return '_NaN_';\n      }\n\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    if (stack.length >= options.maxDepth) {\n      if (Array.isArray(value)) {\n        return \"[Array(\".concat(value.length, \")]\");\n      }\n\n      return '[Object]';\n    }\n\n    var found = objects.find(function (o) {\n      return o.value === value;\n    });\n\n    if (!found) {\n      if (value && (0, _isobject.default)(value) && value.constructor && value.constructor.name && value.constructor.name !== 'Object') {\n        if (!options.allowClass) {\n          return undefined;\n        }\n\n        try {\n          Object.assign(value, {\n            '_constructor-name_': value.constructor.name\n          });\n        } catch (e) {// immutable objects can't be written to and throw\n          // we could make a deep copy but if the user values the correct instance name,\n          // the user should make the deep copy themselves.\n        }\n      }\n\n      keys.push(key);\n      stack.unshift(value);\n      objects.push({\n        keys: keys.join('.'),\n        value: value\n      });\n      return value;\n    } //  actually, here's the only place where the keys keeping is useful\n\n\n    return \"_duplicate_\".concat(found.keys);\n  };\n};\n\nexports.replacer = replacer;\n\nvar reviver = function reviver() {\n  var refs = [];\n  var root;\n  return function revive(key, value) {\n    // last iteration = root\n    if (key === '') {\n      root = value; // restore cyclic refs\n\n      refs.forEach(function (_ref) {\n        var target = _ref.target,\n            container = _ref.container,\n            replacement = _ref.replacement;\n\n        if (replacement === 'root') {\n          // eslint-disable-next-line no-param-reassign\n          container[target] = root;\n        } else {\n          // eslint-disable-next-line no-param-reassign\n          container[target] = (0, _get.default)(root, replacement.replace('root.', ''));\n        }\n      });\n    }\n\n    if (key === '_constructor-name_') {\n      return value;\n    } // deal with instance names\n\n\n    if ((0, _isobject.default)(value) && value['_constructor-name_']) {\n      var name = value['_constructor-name_'];\n\n      if (name !== 'Object') {\n        // eslint-disable-next-line no-new-func\n        var Fn = new Function(\"return function \".concat(name, \"(){}\"))();\n        Object.setPrototypeOf(value, new Fn());\n      } // eslint-disable-next-line no-param-reassign\n\n\n      delete value['_constructor-name_'];\n      return value;\n    }\n\n    if (typeof value === 'string' && value.startsWith('_function_')) {\n      var _value$match = value.match(/_function_([^|]*)\\|(.*)/),\n          _value$match2 = _slicedToArray(_value$match, 3),\n          _name = _value$match2[1],\n          source = _value$match2[2]; // lazy eval of the function\n\n\n      var result = function result() {\n        var f = eval(\"(\".concat(source, \")\"));\n        f.apply(void 0, arguments);\n      };\n\n      Object.defineProperty(result, 'toString', {\n        value: function value() {\n          return source;\n        }\n      });\n      Object.defineProperty(result, 'name', {\n        value: _name\n      });\n      return result;\n    }\n\n    if (typeof value === 'string' && value.startsWith('_regexp_')) {\n      // this split isn't working correctly\n      var _value$match3 = value.match(/_regexp_([^|]*)\\|(.*)/),\n          _value$match4 = _slicedToArray(_value$match3, 3),\n          flags = _value$match4[1],\n          _source = _value$match4[2];\n\n      return new RegExp(_source, flags);\n    }\n\n    if (typeof value === 'string' && value.startsWith('_date_')) {\n      return new Date(value.replace('_date_', ''));\n    }\n\n    if (typeof value === 'string' && value.startsWith('_duplicate_')) {\n      refs.push({\n        target: key,\n        container: this,\n        replacement: value.replace('_duplicate_', '')\n      });\n      return null;\n    }\n\n    if (typeof value === 'string' && value.startsWith('_symbol_')) {\n      return Symbol(value.replace('_symbol_', ''));\n    }\n\n    if (typeof value === 'string' && value === '_undefined_') {\n      return undefined;\n    }\n\n    if (typeof value === 'string' && value === '_-Infinity_') {\n      return -Infinity;\n    }\n\n    if (typeof value === 'string' && value === '_Infinity_') {\n      return Infinity;\n    }\n\n    if (typeof value === 'string' && value === '_NaN_') {\n      return NaN;\n    }\n\n    return value;\n  };\n};\n\nexports.reviver = reviver;\n\nvar isJSON = function isJSON(input) {\n  return input.match(/^[\\[\\{\\\"\\}].*[\\]\\}\\\"]$/);\n};\n\nexports.isJSON = isJSON;\nvar defaultOptions = {\n  maxDepth: 10,\n  space: undefined,\n  allowFunction: true,\n  allowRegExp: true,\n  allowDate: true,\n  allowClass: true,\n  allowUndefined: true,\n  allowSymbol: true\n};\n\nvar stringify = function stringify(data) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var mergedOptions = Object.assign({}, defaultOptions, options);\n  return JSON.stringify(data, replacer(mergedOptions), options.space);\n};\n\nexports.stringify = stringify;\n\nvar parse = function parse(data) {\n  return JSON.parse(data, reviver());\n};\n\nexports.parse = parse;","map":null,"metadata":{},"sourceType":"script"}