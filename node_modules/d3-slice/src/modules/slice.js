import * as d3 from 'd3'

export default function slice(container) {
  let
  namespace='slice',
  n = (s) => `${namespace}-${s}`,

  data,
  dataKeys,

  values,
  dataValues,
  valueExtractor = (key, index) => data[key],
  dataExtent,

  spaceX,
  spaceY,
  spaceM,

  radius,
  radiusPercent = 0.9,
  labelPaddingPercent = 0.1,
  labelRadius,
  outerRadius,
  innerRadius,
  cornerRadius,

  pieContainer,
  pie,
  arc,
  labelArc,
  slices,
  slicePadding=0.1,
  slicePathData,
  labels,
  labelLines,

  colorExtractor = (key, index) => {
    return d3.scaleSequential()
    .interpolator(d3.interpolateViridis)
    (index / dataKeys.length)
  },
  stroke = (k, i)=>colorExtractor(k, i),
  strokeWidth = 0.1,
  opacity = 0.5,

  labelLineStroke = 'black',
  labelLineStrokeWidth = '2',
  labelLineOpacity = 0.3,

  transitionDuration = (k, i)=>500,
  easeFn = d3.easeSin,
  mouseover = (k, i) => {},
  mouseleave = (k, i) => {}

  slice.namespace = function(_) { return arguments.length ? (namespace = _, slice) : namespace; };

  slice.data = function(_) { return arguments.length ? (data = _, slice) : data; };
  slice.dataKeys = function(_) { return arguments.length ? (dataKeys = _, slice) : dataKeys; };

  slice.values = function(_) { return arguments.length ? (values = _, slice) : values; };
  slice.dataValues = function(_) { return arguments.length ? (dataValues = _, slice) : dataValues; };
  slice.valueExtractor = function(_) { return arguments.length ? (valueExtractor = _, slice) : valueExtractor; };
  slice.dataExtent = function(_) { return arguments.length ? (dataExtent = _, slice) : dataExtent; };

  slice.spaceX = function(_) { return arguments.length ? (spaceX = _, slice) : spaceX; };
  slice.spaceY = function(_) { return arguments.length ? (spaceY = _, slice) : spaceY; };
  slice.spaceM = function(_) { return arguments.length ? (spaceM = _, slice) : spaceM; };

  slice.radius = function(_) { return arguments.length ? (radius = _, slice) : radius; };
  slice.radiusPercent = function(_) { return arguments.length ? (radiusPercent = _, slice) : radiusPercent; };
  slice.labelPaddingPercent = function(_) { return arguments.length ? (labelPaddingPercent = _, slice) : labelPaddingPercent; };
  slice.labelRadius = function(_) { return arguments.length ? (labelRadius = _, slice) : labelRadius; };
  slice.outerRadius = function(_) { return arguments.length ? (outerRadius = _, slice) : outerRadius; };
  slice.innerRadius = function(_) { return arguments.length ? (innerRadius = _, slice) : innerRadius; };
  slice.cornerRadius = function(_) { return arguments.length ? (cornerRadius = _, slice) : cornerRadius; };

  slice.pieContainer = function(_) { return arguments.length ? (pieContainer = _, slice) : pieContainer; };
  slice.pie = function(_) { return arguments.length ? (pie = _, slice) : pie; };
  slice.arc = function(_) { return arguments.length ? (arc = _, slice) : arc; };
  slice.labelArc = function(_) { return arguments.length ? (labelArc = _, slice) : labelArc; };
  slice.slices = function(_) { return arguments.length ? (slices = _, slice) : slices; };
  slice.slicePadding = function(_) { return arguments.length ? (slicePadding = _, slice) : slicePadding; };
  slice.slicePathData = function(_) { return arguments.length ? (slicePathData = _, slice) : slicePathData; };
  slice.labels = function(_) { return arguments.length ? (labels = _, slice) : labels; };
  slice.labelLines = function(_) { return arguments.length ? (labelLines = _, slice) : labelLines; };

  slice.colorExtractor = function(_) { return arguments.length ? (colorExtractor = _, slice) : colorExtractor; };
  slice.stroke = function(_) { return arguments.length ? (stroke = _, slice) : stroke; };
  slice.strokeWidth = function(_) { return arguments.length ? (strokeWidth = _, slice) : strokeWidth; };
  slice.opacity = function(_) { return arguments.length ? (opacity = _, slice) : opacity; };

  slice.labelLineStroke = function(_) { return arguments.length ? (labelLineStroke = _, slice) : labelLineStroke; };
  slice.labelLineStrokeWidth = function(_) { return arguments.length ? (labelLineStrokeWidth = _, slice) : labelLineStrokeWidth; };
  slice.labelLineOpacity = function(_) { return arguments.length ? (labelLineOpacity = _, slice) : labelLineOpacity; };

  slice.transitionDuration = function(_) { return arguments.length ? (transitionDuration = _, slice) : transitionDuration; };
  slice.easeFn = function(_) { return arguments.length ? (easeFn = _, slice) : easeFn; };

  slice.mouseover = function(_) { return arguments.length ? (mouseover = _, slice) : mouseover; };
  slice.mouseleave = function(_) { return arguments.length ? (mouseleave = _, slice) : mouseleave; };

  function slice() {
    dataKeys = d3.keys(data)
    dataValues = dataKeys.map((k,i)=>{
      return valueExtractor(k, i)
    })


    dataExtent = d3.extent(dataValues)
    let [dataMin, dataMax] = dataExtent

    spaceM = Math.min(spaceX, spaceY)

    radius = spaceM / 2
    labelRadius = radius * radiusPercent
    outerRadius =labelRadius * (1-labelPaddingPercent)
    innerRadius = outerRadius / 2

    pieContainer = container.select(`g.${n('pie-container')}`)
    if (pieContainer.empty()) {
      pieContainer = container.append('g').attr('class', `${n('pie-container')}`)
    }
    pieContainer.attr('transform', `translate(${spaceX/2},${spaceY/2})`)

    pie = d3.pie().value((d,i)=>valueExtractor(d, i))
    arc = d3.arc().outerRadius(outerRadius).innerRadius(innerRadius)
    labelArc = d3.arc().outerRadius(labelRadius).innerRadius(labelRadius)

    slices = pieContainer.selectAll(`path.${n('slice-path')}`).data(dataKeys)
    slices.exit().remove()
    slices = slices.enter()
      .append('path')
      .attr('class',`${n('slice-path')}`)
      .merge(slices)

    slicePathData = pie.padAngle(slicePadding)(dataKeys);

    slices
      .data(slicePathData)
      .transition()
      .duration((d,i)=>transitionDuration(d.data, d.index))
      .ease(d3.easeSin)
      .attr('d', arc.cornerRadius(cornerRadius))
      .attr('fill', (d, i)=>colorExtractor(d.data, d.index))
      .attr('stroke', (d,i)=>stroke(d.data, d.index))
      .attr('stroke-width', strokeWidth)
      .attr('opacity', opacity)

    slices
      .on('mouseenter', mouseover)
      .on('mouseover', mouseover)
      .on('mouseleave', mouseleave)
      .on('mouseexit',  mouseleave)



    labels = pieContainer.selectAll(`text.${n('slice-label')}`).data(slicePathData)
    labels.exit().remove()
    labels = labels.enter()
      .append('text')
      .attr('class',`${n('slice-label')}`)
      .merge(labels)

    labels.attr('dy', '.35em')
  		.text(d=>d.data)

    labels
      .transition()
      .duration((d,i)=>transitionDuration(d.data, d.index))
      .ease(d3.easeSin)
      .attrTween('transform', function(d) {
    		this._current = this._current || d;
    		let interpolate = d3.interpolate(this._current, d);
    		this._current = interpolate(0)
    		return function(t) {
    			let d2 = interpolate(t);
    			let pos = labelArc.centroid(d2);
    			pos[0] = radius * (midAngle(d2) < Math.PI ? 1 : -1);
    			return `translate(${pos})`;
    		};
  	  })
      .styleTween("text-anchor", function(d){
  			this._current = this._current || d;
  			var interpolate = d3.interpolate(this._current, d);
  			this._current = interpolate(0);
  			return function(t) {
  				var d2 = interpolate(t);
  				return midAngle(d2) < Math.PI ? "start":"end";
  			};
  		});


    labelLines = pieContainer
      .selectAll(`polyline.${n('slice-label-line')}`)
      .data(slicePathData)

    labelLines.exit().remove()
    labelLines = labelLines.enter()
      .append('polyline')
      .attr('class',`${n('slice-label-line')}`)
      .merge(labelLines)



    labelLines
      .transition()
      .duration((d,i)=>transitionDuration(d.data, d.index))
      .ease(d3.easeSin)
  		.attrTween('points', function(d){
  			this._current = this._current || d;
  			var interpolate = d3.interpolate(this._current, d);
  			this._current = interpolate(0);
  			return function(t) {
  				var d2 = interpolate(t);
  				var pos = labelArc.centroid(d2);
  				pos[0] = (radius) * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);
  				return [arc.centroid(d2), labelArc.centroid(d2), pos];
  			};
  		})
      .attr('stroke', labelLineStroke)
      .attr('stroke-width', labelLineStrokeWidth)
      .attr('fill', 'none')
      .attr('opacity', labelLineOpacity)




  }

  function midAngle(d){
    return d.startAngle + (d.endAngle - d.startAngle)/2;
  }

  return slice
}
