(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3')) :
  typeof define === 'function' && define.amd ? define(['exports', 'd3'], factory) :
  (factory((global['d3-slice'] = global['d3-slice'] || {}),global.d3));
}(this, (function (exports,d3) { 'use strict';

  if (typeof document !== "undefined") {
    var element = document.documentElement;
  }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  function slice(container) {
    var namespace = 'slice',
        n = function n(s) {
      return "".concat(namespace, "-").concat(s);
    },
        data,
        dataKeys,
        values,
        dataValues,
        valueExtractor = function valueExtractor(key, index) {
      return data[key];
    },
        dataExtent,
        spaceX,
        spaceY,
        spaceM,
        radius,
        radiusPercent = 0.9,
        labelPaddingPercent = 0.1,
        labelRadius,
        outerRadius,
        innerRadius,
        cornerRadius,
        pieContainer,
        pie,
        arc,
        labelArc,
        slices,
        slicePadding = 0.1,
        slicePathData,
        labels,
        labelLines,
        colorExtractor = function colorExtractor(key, index) {
      return d3.scaleSequential().interpolator(d3.interpolateViridis)(index / dataKeys.length);
    },
        stroke = function stroke(k, i) {
      return colorExtractor(k, i);
    },
        strokeWidth = 0.1,
        opacity = 0.5,
        labelLineStroke = 'black',
        labelLineStrokeWidth = '2',
        labelLineOpacity = 0.3,
        transitionDuration = function transitionDuration(k, i) {
      return 500;
    },
        easeFn = d3.easeSin,
        mouseover = function mouseover(k, i) {},
        mouseleave = function mouseleave(k, i) {};

    slice.namespace = function (_) {
      return arguments.length ? (namespace = _, slice) : namespace;
    };

    slice.data = function (_) {
      return arguments.length ? (data = _, slice) : data;
    };

    slice.dataKeys = function (_) {
      return arguments.length ? (dataKeys = _, slice) : dataKeys;
    };

    slice.values = function (_) {
      return arguments.length ? (values = _, slice) : values;
    };

    slice.dataValues = function (_) {
      return arguments.length ? (dataValues = _, slice) : dataValues;
    };

    slice.valueExtractor = function (_) {
      return arguments.length ? (valueExtractor = _, slice) : valueExtractor;
    };

    slice.dataExtent = function (_) {
      return arguments.length ? (dataExtent = _, slice) : dataExtent;
    };

    slice.spaceX = function (_) {
      return arguments.length ? (spaceX = _, slice) : spaceX;
    };

    slice.spaceY = function (_) {
      return arguments.length ? (spaceY = _, slice) : spaceY;
    };

    slice.spaceM = function (_) {
      return arguments.length ? (spaceM = _, slice) : spaceM;
    };

    slice.radius = function (_) {
      return arguments.length ? (radius = _, slice) : radius;
    };

    slice.radiusPercent = function (_) {
      return arguments.length ? (radiusPercent = _, slice) : radiusPercent;
    };

    slice.labelPaddingPercent = function (_) {
      return arguments.length ? (labelPaddingPercent = _, slice) : labelPaddingPercent;
    };

    slice.labelRadius = function (_) {
      return arguments.length ? (labelRadius = _, slice) : labelRadius;
    };

    slice.outerRadius = function (_) {
      return arguments.length ? (outerRadius = _, slice) : outerRadius;
    };

    slice.innerRadius = function (_) {
      return arguments.length ? (innerRadius = _, slice) : innerRadius;
    };

    slice.cornerRadius = function (_) {
      return arguments.length ? (cornerRadius = _, slice) : cornerRadius;
    };

    slice.pieContainer = function (_) {
      return arguments.length ? (pieContainer = _, slice) : pieContainer;
    };

    slice.pie = function (_) {
      return arguments.length ? (pie = _, slice) : pie;
    };

    slice.arc = function (_) {
      return arguments.length ? (arc = _, slice) : arc;
    };

    slice.labelArc = function (_) {
      return arguments.length ? (labelArc = _, slice) : labelArc;
    };

    slice.slices = function (_) {
      return arguments.length ? (slices = _, slice) : slices;
    };

    slice.slicePadding = function (_) {
      return arguments.length ? (slicePadding = _, slice) : slicePadding;
    };

    slice.slicePathData = function (_) {
      return arguments.length ? (slicePathData = _, slice) : slicePathData;
    };

    slice.labels = function (_) {
      return arguments.length ? (labels = _, slice) : labels;
    };

    slice.labelLines = function (_) {
      return arguments.length ? (labelLines = _, slice) : labelLines;
    };

    slice.colorExtractor = function (_) {
      return arguments.length ? (colorExtractor = _, slice) : colorExtractor;
    };

    slice.stroke = function (_) {
      return arguments.length ? (stroke = _, slice) : stroke;
    };

    slice.strokeWidth = function (_) {
      return arguments.length ? (strokeWidth = _, slice) : strokeWidth;
    };

    slice.opacity = function (_) {
      return arguments.length ? (opacity = _, slice) : opacity;
    };

    slice.labelLineStroke = function (_) {
      return arguments.length ? (labelLineStroke = _, slice) : labelLineStroke;
    };

    slice.labelLineStrokeWidth = function (_) {
      return arguments.length ? (labelLineStrokeWidth = _, slice) : labelLineStrokeWidth;
    };

    slice.labelLineOpacity = function (_) {
      return arguments.length ? (labelLineOpacity = _, slice) : labelLineOpacity;
    };

    slice.transitionDuration = function (_) {
      return arguments.length ? (transitionDuration = _, slice) : transitionDuration;
    };

    slice.easeFn = function (_) {
      return arguments.length ? (easeFn = _, slice) : easeFn;
    };

    slice.mouseover = function (_) {
      return arguments.length ? (mouseover = _, slice) : mouseover;
    };

    slice.mouseleave = function (_) {
      return arguments.length ? (mouseleave = _, slice) : mouseleave;
    };

    function slice() {
      dataKeys = d3.keys(data);
      dataValues = dataKeys.map(function (k, i) {
        return valueExtractor(k, i);
      });
      dataExtent = d3.extent(dataValues);

      var _dataExtent = dataExtent,
          _dataExtent2 = _slicedToArray(_dataExtent, 2),
          dataMin = _dataExtent2[0],
          dataMax = _dataExtent2[1];

      spaceM = Math.min(spaceX, spaceY);
      radius = spaceM / 2;
      labelRadius = radius * radiusPercent;
      outerRadius = labelRadius * (1 - labelPaddingPercent);
      innerRadius = outerRadius / 2;
      pieContainer = container.select("g.".concat(n('pie-container')));

      if (pieContainer.empty()) {
        pieContainer = container.append('g').attr('class', "".concat(n('pie-container')));
      }

      pieContainer.attr('transform', "translate(".concat(spaceX / 2, ",").concat(spaceY / 2, ")"));
      pie = d3.pie().value(function (d, i) {
        return valueExtractor(d, i);
      });
      arc = d3.arc().outerRadius(outerRadius).innerRadius(innerRadius);
      labelArc = d3.arc().outerRadius(labelRadius).innerRadius(labelRadius);
      slices = pieContainer.selectAll("path.".concat(n('slice-path'))).data(dataKeys);
      slices.exit().remove();
      slices = slices.enter().append('path').attr('class', "".concat(n('slice-path'))).merge(slices);
      slicePathData = pie.padAngle(slicePadding)(dataKeys);
      slices.data(slicePathData).transition().duration(function (d, i) {
        return transitionDuration(d.data, d.index);
      }).ease(d3.easeSin).attr('d', arc.cornerRadius(cornerRadius)).attr('fill', function (d, i) {
        return colorExtractor(d.data, d.index);
      }).attr('stroke', function (d, i) {
        return stroke(d.data, d.index);
      }).attr('stroke-width', strokeWidth).attr('opacity', opacity);
      slices.on('mouseenter', mouseover).on('mouseover', mouseover).on('mouseleave', mouseleave).on('mouseexit', mouseleave);
      labels = pieContainer.selectAll("text.".concat(n('slice-label'))).data(slicePathData);
      labels.exit().remove();
      labels = labels.enter().append('text').attr('class', "".concat(n('slice-label'))).merge(labels);
      labels.attr('dy', '.35em').text(function (d) {
        return d.data;
      });
      labels.transition().duration(function (d, i) {
        return transitionDuration(d.data, d.index);
      }).ease(d3.easeSin).attrTween('transform', function (d) {
        this._current = this._current || d;
        var interpolate = d3.interpolate(this._current, d);
        this._current = interpolate(0);
        return function (t) {
          var d2 = interpolate(t);
          var pos = labelArc.centroid(d2);
          pos[0] = radius * (midAngle(d2) < Math.PI ? 1 : -1);
          return "translate(".concat(pos, ")");
        };
      }).styleTween("text-anchor", function (d) {
        this._current = this._current || d;
        var interpolate = d3.interpolate(this._current, d);
        this._current = interpolate(0);
        return function (t) {
          var d2 = interpolate(t);
          return midAngle(d2) < Math.PI ? "start" : "end";
        };
      });
      labelLines = pieContainer.selectAll("polyline.".concat(n('slice-label-line'))).data(slicePathData);
      labelLines.exit().remove();
      labelLines = labelLines.enter().append('polyline').attr('class', "".concat(n('slice-label-line'))).merge(labelLines);
      labelLines.transition().duration(function (d, i) {
        return transitionDuration(d.data, d.index);
      }).ease(d3.easeSin).attrTween('points', function (d) {
        this._current = this._current || d;
        var interpolate = d3.interpolate(this._current, d);
        this._current = interpolate(0);
        return function (t) {
          var d2 = interpolate(t);
          var pos = labelArc.centroid(d2);
          pos[0] = radius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);
          return [arc.centroid(d2), labelArc.centroid(d2), pos];
        };
      }).attr('stroke', labelLineStroke).attr('stroke-width', labelLineStrokeWidth).attr('fill', 'none').attr('opacity', labelLineOpacity);
    }

    function midAngle(d) {
      return d.startAngle + (d.endAngle - d.startAngle) / 2;
    }

    return slice;
  }

  function getTranslation(transform) {
    var g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
    transform = transform == undefined ? 'translate(0,0)' : transform;
    g.setAttributeNS(null, 'transform', transform);
    var matrix = g.transform.baseVal.consolidate().matrix;
    return [matrix.e, matrix.f];
  }
  function resizeDebounce(f, wait) {
    var resize = debounce(function () {
      f();
    }, wait);
    window.addEventListener('resize', resize);
  }
  function debounce(func, wait, immediate) {
    var timeout;
    return function () {
      var context = this,
          args = arguments;

      var later = function later() {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };

      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func.apply(context, args);
    };
  }

  var utils = /*#__PURE__*/Object.freeze({
    getTranslation: getTranslation,
    resizeDebounce: resizeDebounce,
    debounce: debounce
  });

  var d3_slice = {
    slice: slice,
    utils: utils
  };

  if (typeof window !== 'undefined') {
    window.d3_slice = d3_slice;
  }

  exports.default = d3_slice;
  exports.slice = slice;
  exports.utils = utils;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
