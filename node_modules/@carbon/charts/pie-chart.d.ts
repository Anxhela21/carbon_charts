import { Pie, Arc } from "d3-shape";
import { BaseChart } from "./base-chart";
import * as Configuration from "./configuration";
import { ChartConfig, PieChartOptions, ChartType, ChartData } from "./configuration";
export interface PieDatum {
    label: string;
    value: number;
    items?: Array<PieDatum>;
}
export interface PieDataSet extends Configuration.DataSet {
    data: Array<PieDatum>;
}
export interface PieData {
    labels: Array<string>;
    datasets: Array<PieDataSet>;
}
export declare class PieChart extends BaseChart {
    pie: Pie<PieChart, any>;
    arc: Arc<PieChart, any>;
    path: any;
    options: PieChartOptions;
    constructor(holder: Element, configs: ChartConfig<PieChartOptions>, type?: ChartType.PIE | ChartType.DONUT);
    dataProcessor(dataObject: ChartData): PieData;
    initialDraw(): void;
    draw(): void;
    interpolateValues(newData: any): void;
    reduceOpacity(exception?: any): void;
    getTooltipHTML: (d: any) => string;
    addDataPointEventListener(): void;
    update(newData?: any): void;
    resizeChart(): void;
    private computeRadius();
    /**
     * Return the css transform string to be used for the slice
     *
     * @private
     * @param {any} d - d3 data item for slice
     * @param {any} radius - computed radius of the chart
     * @returns final transform string to be applied to the <text> element
     * @memberof PieChart
     */
    private deriveTransformString(element, d, radius);
}
