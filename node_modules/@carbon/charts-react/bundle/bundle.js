(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('@carbon/charts')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', '@carbon/charts'], factory) :
  (factory((global.chartsReact = {}),global.React,global.charts));
}(this, (function (exports,React,charts) { 'use strict';

  React = React && React.hasOwnProperty('default') ? React['default'] : React;

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  var possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  var BaseChart = function (_React$Component) {
  	inherits(BaseChart, _React$Component);

  	function BaseChart(props) {
  		classCallCheck(this, BaseChart);

  		var _this = possibleConstructorReturn(this, (BaseChart.__proto__ || Object.getPrototypeOf(BaseChart)).call(this, props));

  		_this.data = props.data;
  		_this.options = props.options;

  		// Width prop is mandatory for the wrappers
  		if (props.width) {
  			_this.options.width = props.width;
  		} else if (!_this.options.width) {
  			console.error("Missing `width` prop!");
  		}

  		// Height prop is mandatory for the wrappers
  		if (props.height) {
  			_this.options.height = props.height;
  		} else if (!_this.options.height) {
  			console.error("Missing `height` prop!");
  		}

  		Object.assign(_this, _this.chart);
  		return _this;
  	}

  	createClass(BaseChart, [{
  		key: "componentDidUpdate",
  		value: function componentDidUpdate() {
  			this.chart.setData(this.props.data);
  		}
  	}]);
  	return BaseChart;
  }(React.Component);

  var PieChart = function (_BaseChart) {
  	inherits(PieChart, _BaseChart);

  	function PieChart() {
  		classCallCheck(this, PieChart);
  		return possibleConstructorReturn(this, (PieChart.__proto__ || Object.getPrototypeOf(PieChart)).apply(this, arguments));
  	}

  	createClass(PieChart, [{
  		key: "componentDidMount",
  		value: function componentDidMount() {
  			this.chart = new charts.PieChart(this.chartRef, {
  				data: this.props.data,
  				options: this.props.options
  			});
  		}
  	}, {
  		key: "render",
  		value: function render() {
  			var _this2 = this;

  			return React.createElement("div", {
  				ref: function ref(chartRef) {
  					return _this2.chartRef = chartRef;
  				},
  				className: "chart-holder" });
  		}
  	}]);
  	return PieChart;
  }(BaseChart);

  var DonutChart = function (_BaseChart) {
  	inherits(DonutChart, _BaseChart);

  	function DonutChart() {
  		classCallCheck(this, DonutChart);
  		return possibleConstructorReturn(this, (DonutChart.__proto__ || Object.getPrototypeOf(DonutChart)).apply(this, arguments));
  	}

  	createClass(DonutChart, [{
  		key: "componentDidMount",
  		value: function componentDidMount() {
  			this.chart = new charts.DonutChart(this.chartRef, {
  				data: this.props.data,
  				options: this.props.options
  			});
  		}
  	}, {
  		key: "render",
  		value: function render() {
  			var _this2 = this;

  			return React.createElement("div", {
  				ref: function ref(chartRef) {
  					return _this2.chartRef = chartRef;
  				},
  				className: "chart-holder" });
  		}
  	}]);
  	return DonutChart;
  }(BaseChart);

  var LineChart = function (_BaseChart) {
  	inherits(LineChart, _BaseChart);

  	function LineChart() {
  		classCallCheck(this, LineChart);
  		return possibleConstructorReturn(this, (LineChart.__proto__ || Object.getPrototypeOf(LineChart)).apply(this, arguments));
  	}

  	createClass(LineChart, [{
  		key: "componentDidMount",
  		value: function componentDidMount() {
  			this.chart = new charts.LineChart(this.chartRef, {
  				data: this.props.data,
  				options: this.props.options
  			});
  		}
  	}, {
  		key: "render",
  		value: function render() {
  			var _this2 = this;

  			return React.createElement("div", {
  				ref: function ref(chartRef) {
  					return _this2.chartRef = chartRef;
  				},
  				className: "chart-holder" });
  		}
  	}]);
  	return LineChart;
  }(BaseChart);

  var BarChart = function (_BaseChart) {
  	inherits(BarChart, _BaseChart);

  	function BarChart() {
  		classCallCheck(this, BarChart);
  		return possibleConstructorReturn(this, (BarChart.__proto__ || Object.getPrototypeOf(BarChart)).apply(this, arguments));
  	}

  	createClass(BarChart, [{
  		key: "componentDidMount",
  		value: function componentDidMount() {
  			this.chart = new charts.BarChart(this.chartRef, {
  				data: this.props.data,
  				options: this.props.options
  			});
  		}
  	}, {
  		key: "render",
  		value: function render() {
  			var _this2 = this;

  			return React.createElement("div", {
  				ref: function ref(chartRef) {
  					return _this2.chartRef = chartRef;
  				},
  				className: "chart-holder" });
  		}
  	}]);
  	return BarChart;
  }(BaseChart);

  exports.PieChart = PieChart;
  exports.DonutChart = DonutChart;
  exports.LineChart = LineChart;
  exports.BarChart = BarChart;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
